/*
*    Script builds apk in release or debug mode
*    To run:
*            gradle assembleRelease -Prelease (release mode)
*            gradle assembleDebug (debug mode -> default)
*     Options:
*            -Prelease  //this flag will run build in release mode
*            -PksPath=[path_to_keystore_file]
*            -PksPassword=[password_for_keystore_file]
*            -Palias=[alias_to_use_from_keystore_file]
*            -Ppassword=[password_for_alias]
*
*            -PtargetSdk=[target_sdk]
*            -PbuildToolsVersion=[build_tools_version]
*            -PcompileSdk=[compile_sdk_version]
*            -PandroidXLegacy=[androidx_legacy_version]
*            -PandroidXAppCompat=[androidx_appcompat_version]
*            -PandroidXMaterial=[androidx_material_version]
*            -PappPath=[app_path]
*            -PappResourcesPath=[app_resources_path]
*/

import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {
//    NativeScript_applyBuildScriptConfigurations()
}

plugins {
    id 'com.nativescript.android.build-plugin' version '1.0-SNAPSHOT'
}

apply plugin: "com.android.application"
apply from: "gradle-helpers/CustomExecutionLogger.gradle"

def enableKotlin = (project.hasProperty("useKotlin") && project.useKotlin == "true");

if (enableKotlin) {
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-parcelize'
}

def onlyX86 = project.hasProperty("onlyX86")
if (onlyX86) {
    outLogger.withStyle(Style.Info).println "OnlyX86 build triggered."
}

def computeKotlinVersion = { -> project.hasProperty("kotlinVersion") ? kotlinVersion : "${ns_default_kotlin_version}" }
def computeCompileSdkVersion = { -> project.hasProperty("compileSdk") ? compileSdk : NS_DEFAULT_COMPILE_SDK_VERSION as int }
def computeTargetSdkVersion = { -> project.hasProperty("targetSdk") ? targetSdk : NS_DEFAULT_COMPILE_SDK_VERSION as int }
def computeBuildToolsVersion = { -> project.hasProperty("buildToolsVersion") ? buildToolsVersion : NS_DEFAULT_BUILD_TOOLS_VERSION as String}

project.ext.selectedBuildType = project.hasProperty("release") ? "release" : "debug"

android {
    NativeScript_applyBeforePluginGradleConfiguration()

    if (enableKotlin) {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    compileSdkVersion computeCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()

    defaultConfig {
        def manifest = new XmlSlurper().parse(file(android.sourceSets.main.manifest.srcFile))
        def minSdkVer = manifest."uses-sdk"."@android:minSdkVersion".text() ?: NS_DEFAULT_MIN_SDK_VERSION
        minSdkVersion minSdkVer
        targetSdkVersion computeTargetSdkVersion()
        ndk {
//            if (onlyX86) {
//                abiFilters 'x86'
//            } else {
//                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
//            }
            abiFilters 'arm64-v8a'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets.main {
        jniLibs.srcDirs = ["$projectDir/libs/jni", "$projectDir/snapshot-build/build/ndk-build/libs"]
    }

    signingConfigs {
        release {
            if (project.hasProperty("release")) {
                if (project.hasProperty("ksPath") &&
                        project.hasProperty("ksPassword") &&
                        project.hasProperty("alias") &&
                        project.hasProperty("password")) {

                    storeFile file(ksPath)
                    storePassword ksPassword
                    keyAlias alias
                    keyPassword password
                }
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    NativeScript_setAppIdentifier()
    NativeScript_applyPluginGradleConfigurations()
    NativeScript_applyAppGradleConfiguration()
    NativeScript_initializeMergedAssetsOutputPath()
}

dependencies {
    NativeScript_addDependencies()
//    NativeScript_addRuntime()

    implementation 'org.nativescript.android:runtime:1.0-SNAPSHOT'

    def kotlinVersion = computeKotlinVersion()
    if (enableKotlin) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    }
}

allprojects {
    afterEvaluate { project ->
        def buildType = project.selectedBuildType
        def jars = []
        def artifactType = Attribute.of('artifactType', String)
        android.applicationVariants.all { variant ->
            if (variant.buildType.name == buildType) {
                variant.getCompileClasspath().each { fileDependency ->
                    NativeScript_processJar(fileDependency, jars)
                }
            }
        }
    }
}


if (failOnCompilationWarningsEnabled()) {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:all' << "-Werror"
        options.deprecation = true
    }
}

def failOnCompilationWarningsEnabled() {
    return project.hasProperty("failOnCompilationWarnings") && (failOnCompilationWarnings || failOnCompilationWarnings.toBoolean())
}


task validateAppIdMatch {
    doLast {
        def lineSeparator = System.getProperty("line.separator")

        if (project.hasProperty("nsApplicationIdentifier") && !project.hasProperty("release")) {
            if (project.nsApplicationIdentifier != android.defaultConfig.applicationId) {
                def errorMessage = "${lineSeparator}WARNING: The Application identifier is different from the one inside \"package.json\" file.$lineSeparator" +
                        "NativeScript CLI might not work properly.$lineSeparator" +
                        "Remove applicationId from app.gradle and update the \"nativescript.id\" in package.json.$lineSeparator" +
                        "Actual: ${android.defaultConfig.applicationId}$lineSeparator" +
                        "Expected(from \"package.json\"): ${project.nsApplicationIdentifier}$lineSeparator"

                logger.error(errorMessage)
            }
        }
    }
}
